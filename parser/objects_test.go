package parser

import (
	"encoding/json"
	"testing"

	"github.com/btcsuite/btcutil/base58"
	"github.com/stretchr/testify/assert"
)

func TestObjectsParsing(t *testing.T) {
	var data = []byte{10, 123, 126, 8, 245, 85, 255, 79, 3, 0, 0, 0, 106, 111, 101, 4, 0, 0, 0, 115, 97, 105, 107, 6, 0, 0, 0, 76, 111, 110, 100, 111, 110, 9, 8, 7, 0, 1, 1, 2, 1, 2, 0}
	var idlEncoded = "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"

	idl := make(map[string]interface{})
	err := json.Unmarshal(base58.Decode(idlEncoded), &idl)
	assert.NoError(t, err)

	offset := 8

	argType := make(map[string]interface{})
	argType["defined"] = "Info"
	objRaw, n := extractNonPrimitive(data, idl["type"].([]interface{}), offset, argType)
	obj := objRaw.(map[string]interface{})
	offset += n
	assert.Equal(t, "joe", obj["name"])
	assert.Equal(t, "saik", obj["surname"])
	assert.Equal(t, "add it here pls", obj["location"])

	argType["defined"] = "Options"
	enum, _ := extractNonPrimitive(data, idl["type"].([]interface{}), offset, argType)
	assert.Equal(t, "add it here pls", enum)
}
